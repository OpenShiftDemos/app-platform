---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: 'false'
    app.openshift.io/vcs-ref: ''
    app.openshift.io/vcs-uri: 'https://github.com/coolstore-demo/catalog-spring-boot.git'
  name: catalog-spring-boot
  labels:
    app: catalog-spring-boot
    app.kubernetes.io/component: catalog-spring-boot
    app.kubernetes.io/instance: catalog-spring-boot
    app.kubernetes.io/name: catalog-spring-boot
    app.kubernetes.io/part-of: coolstore
    app.openshift.io/runtime: spring-boot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalog-spring-boot
  template:
    metadata:
      labels:
        app: catalog-spring-boot
        deployment: catalog-spring-boot
    spec:
      containers:
        - name: catalog-spring-boot
          image: quay.io/coolstore-demo/catalog-spring-boot:1.0.0
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: catalog-spring-boot
  labels:
    app: catalog-spring-boot
    app.kubernetes.io/component: catalog-spring-boot
    app.kubernetes.io/instance: catalog-spring-boot
    app.kubernetes.io/name: catalog-spring-boot
    app.kubernetes.io/part-of: coolstore
    app.openshift.io/runtime: java
spec:
  ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: 8443-tcp
      protocol: TCP
      port: 8443
      targetPort: 8443
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  selector:
    app: catalog-spring-boot
    deployment: catalog-spring-boot
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: gateway-vertx
  annotations:
    app.openshift.io/connects-to: '["catalog-spring-boot","inventory-quarkus"]'
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: 'false'
    app.openshift.io/vcs-ref: ''
    app.openshift.io/vcs-uri: 'https://github.com/coolstore-demo/gateway-vertx.git'
  labels:
    app: gateway-vertx
    app.kubernetes.io/component: gateway-vertx
    app.kubernetes.io/instance: gateway-vertx
    app.kubernetes.io/name: vertx
    app.kubernetes.io/part-of: coolstore
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-vertx
  template:
    metadata:
      labels:
        app: gateway-vertx
    spec:
      containers:
        - name: gateway-vertx
          image: quay.io/bluesman/gateway-vertx:latest
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8443
              protocol: TCP
            - containerPort: 8778
              protocol: TCP
          env:
            - name: COMPONENT_CATALOG_HOST
              value: catalog-spring-boot
            - name: COMPONENT_CATALOG_PORT
              value: '8080'
            - name: COMPONENT_INVENTORY_HOST
              value: inventory-quarkus
            - name: COMPONENT_INVENTORY_PORT
              value: '8080'
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: gateway-vertx
  labels:
    app: gateway-vertx
    app.kubernetes.io/component: gateway-vertx
    app.kubernetes.io/instance: gateway-vertx
    app.kubernetes.io/part-of: coolstore
spec:
  ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: 8443-tcp
      protocol: TCP
      port: 8443
      targetPort: 8443
    - name: 8778-tcp
      protocol: TCP
      port: 8778
      targetPort: 8778
  selector:
    app: gateway-vertx
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: gateway-vertx
  labels:
    app: gateway-vertx
    app.kubernetes.io/component: gateway-vertx
    app.kubernetes.io/instance: gateway-vertx
    app.kubernetes.io/part-of: coolstore
spec:
  to:
    kind: Service
    name: gateway-vertx
    weight: 100
  port:
    targetPort: 8080-tcp
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: 'false'
    app.openshift.io/vcs-ref: ''
    app.openshift.io/vcs-uri: 'https://github.com/coolstore-demo/inventory-quarkus.git'
  name: inventory-quarkus
  labels:
    app: inventory-quarkus
    app.kubernetes.io/component: inventory-quarkus
    app.kubernetes.io/instance: inventory-quarkus
    app.kubernetes.io/name: inventory-quarkus
    app.kubernetes.io/part-of: coolstore
    app.openshift.io/runtime: quarkus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inventory-quarkus
  template:
    metadata:
      labels:
        app: inventory-quarkus
    spec:
      containers:
      - name: inventory-quarkus
        image: quay.io/coolstore-demo/inventory-quarkus:1.0.0
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: inventory-quarkus
  labels:
    app: inventory-quarkus
    app.kubernetes.io/component: inventory-quarkus
    app.kubernetes.io/instance: inventory-quarkus
    app.kubernetes.io/name: inventory-quarkus
    app.kubernetes.io/part-of: coolstore
    app.openshift.io/runtime: quarkus
spec:
  selector:
    app: inventory-quarkus
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: http
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/part-of: catalog-app
  name: catalog-app
---
apiVersion: v1
data:
  database-name: Y2F0YWxvZw==
  database-password: Y2F0YWxvZw==
  database-user: Y2F0YWxvZw==
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: catalog-database
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
  name: catalog-database
type: Opaque
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: catalog-database
  labels:
    app.kubernetes.io/instance: globex
    app.kubernetes.io/name: catalog-database
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
    app.openshift.io/runtime: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog-database
      app.kubernetes.io/part-of: globex-app
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: catalog-database
        app.kubernetes.io/part-of: globex-app
        name: catalog-database
    spec:
      containers:
        - name: catalog-database
          image: 'quay.io/redhat-gpte/globex-catalog-database:app-mod-workshop'
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: catalog-database
                  key: database-user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: catalog-database
                  key: database-password
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: catalog-database
                  key: database-name
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: catalog-app
      serviceAccount: catalog-app
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: catalog-database
  labels:
    app.kubernetes.io/instance: globex
    app.kubernetes.io/name: catalog-database
    app.kubernetes.io/part-of: catalog-app
spec:
  ipFamilies:
    - IPv4
  ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
  internalTrafficPolicy: Cluster
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  sessionAffinity: None
  selector:
    app.kubernetes.io/name: catalog-database
    app.kubernetes.io/part-of: globex-app
---

