---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/part-of: catalog-app
  name: catalog-app
---
apiVersion: v1
data:
  database-name: Y2F0YWxvZw==
  database-password: Y2F0YWxvZw==
  database-user: Y2F0YWxvZw==
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: catalog-database
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
  name: catalog-database
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: catalog-database
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
    app.openshift.io/runtime: postgresql
  name: catalog-database
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog-database
      app.kubernetes.io/part-of: globex-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalog-database
        app.kubernetes.io/part-of: globex-app
        name: catalog-database
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: catalog-database
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: catalog-database
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: catalog-database
        image: quay.io/redhat-gpte/globex-catalog-database:app-mod-workshop
        imagePullPolicy: IfNotPresent
        name: catalog-database
        ports:
        - containerPort: 5432
          name: postgresql
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: catalog-app
      serviceAccountName: catalog-app
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: catalog-database
    app.kubernetes.io/part-of: catalog-app
  name: catalog-database
spec:
  ports:
  - name: postgresql
    port: 5432
  selector:
    app.kubernetes.io/name: catalog-database
    app.kubernetes.io/part-of: globex-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.openshift.io/connects-to: |
      [{"apiVersion":"apps/v1","kind":"Deployment","name":"inventory"},{"apiVersion":"apps/v1","kind":"Deployment","name":"catalog-database"}]      
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: catalog
    app.kubernetes.io/part-of: globex-app
    app.openshift.io/runtime: spring
  name: catalog
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog
      app.kubernetes.io/part-of: globex-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalog
        app.kubernetes.io/part-of: globex-app
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: catalog-database
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: catalog-database
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: catalog-database
        - name: JAVA_OPTIONS
          value: -Dspring.profiles.active=openshift
        - name: SPRING_DATASOURCE_URL
          value: jdbc:postgresql://catalog-database:5432/${POSTGRESQL_DATABASE}
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              key: database-user
              name: catalog-database
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: catalog-database
        - name: INVENTORY_URL
          value: inventory:8080
        image: quay.io/redhat-gpte/globex-catalog:app-mod-workshop
        imagePullPolicy: IfNotPresent
        name: catalog
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: catalog-app
      serviceAccountName: catalog-app
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: catalog
    app.kubernetes.io/part-of: globex-app
  name: catalog
spec:
  ports:
  - name: http
    port: 8080
    targetPort: http
  selector:
    app.kubernetes.io/name: catalog
    app.kubernetes.io/part-of: globex-app
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    openshift.io/host.generated: "true"
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: catalog
    app.kubernetes.io/part-of: globex-app
  name: catalog
spec:
  port:
    targetPort: http
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: catalog
    weight: 100
  wildcardPolicy: None
---
apiVersion: v1
data:
  application.properties: bXAubWVzc2FnaW5nLm91dGdvaW5nLm9yZGVyLWV2ZW50LnRvcGljPWdsb2JleC5vcmRlcnMKa2Fma2EuYm9vdHN0cmFwLnNlcnZlcnM9a2Fma2EtY2x1c3Rlci1rYWZrYS1ib290c3RyYXAua2Fma2E6OTA5Mg==
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: order-placement
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
  name: order-placement
type: Opaque
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: order-placement
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
  name: order-placement
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: order-placement
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
    app.openshift.io/runtime: quarkus
  name: order-placement
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: order-placement
      app.kubernetes.io/part-of: globex-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: order-placement
        app.kubernetes.io/part-of: globex-app
    spec:
      containers:
      - image: quay.io/redhat-gpte/globex-order-placement-service:app-mod-workshop
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /q/health/live
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        name: order-placement
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /q/health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 100m
            memory: 250Mi
          requests:
            cpu: 100m
            memory: 128Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /deployments/config
          name: config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: order-placement
      serviceAccountName: order-placement
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config
        secret:
          defaultMode: 420
          secretName: order-placement
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: order-placement
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
  name: order-placement
spec:
  ports:
  - name: http
    port: 8080
    targetPort: http
  selector:
    app.kubernetes.io/name: order-placement
    app.kubernetes.io/part-of: globex-app
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: globex-ui
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
  name: globex-app-globex-ui
imagePullSecrets:
  - name: image-registry-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.openshift.io/connects-to: |
      [{"apiVersion":"apps/v1","kind":"Deployment","name":"catalog"},
      {"apiVersion":"apps/v1","kind":"Deployment","name":"recommendation-engine"},
      {"apiVersion":"apps/v1","kind":"Deployment","name":"activity-tracking"},
      {"apiVersion":"apps/v1","kind":"Deployment","name":"order-placement"}]      
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: globex-ui
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
    app.openshift.io/runtime: nodejs
  name: globex-ui
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: globex-ui
      app.kubernetes.io/part-of: globex-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: globex-ui
        app.kubernetes.io/part-of: globex-app
    spec:
      containers:
      - env:
        - name: NODE_ENV
          value: prod
        - name: PORT
          value: "8080"
        - name: API_TRACK_USERACTIVITY
          value: http://activity-tracking:8080/track
        - name: API_GET_PAGINATED_PRODUCTS
          value: http://catalog:8080/services/products
        - name: API_GET_PRODUCT_DETAILS_BY_IDS
          value: http://catalog:8080/services/product/list/
        - name: API_CATALOG_RECOMMENDED_PRODUCT_IDS
          value: http://recommendation-engine:8080/score/product
        - name: API_TRACK_PLACEORDER
          value: http://order-placement:8080/placeorder
        image: quay.io/redhat-gpte/globex-recommendation-ui:app-mod-workshop
        imagePullPolicy: IfNotPresent
        name: globex-ui
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: globex-app-globex-ui
      serviceAccountName: globex-app-globex-ui
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: globex-ui
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
  name: globex-ui
spec:
  ports:
  - name: http
    port: 8080
    targetPort: http
  selector:
    app.kubernetes.io/name: globex-ui
    app.kubernetes.io/part-of: globex-app
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    openshift.io/host.generated: "true"
  labels:
    app.kubernetes.io/instance: globex-app
    app.kubernetes.io/name: globex-ui
    app.kubernetes.io/part-of: globex-app
    app.kubernetes.io/version: 1.0.0
  name: globex-ui
spec:
  port:
    targetPort: http
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: globex-ui
    weight: 100
  wildcardPolicy: None
---


